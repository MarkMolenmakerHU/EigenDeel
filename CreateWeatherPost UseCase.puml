@startuml
'https://plantuml.com/sequence-diagram
'ASD Opdracht 2 - 4b(1) JoinCourseAction.joinCourseForInstructor() - v1.0

hide footbox
autonumber

skinparam BoxPadding 10

title DDD Sequence Diagram - UseCase: CreateWeatherPost

actor Actor

box Weather - Bounded Context #FF
participant ": WeatherReportRESTController"          as ReportRESTController        <<adapter>>
participant ": WeatherReportApplicationService"      as ReportApplicationService    <<application>>
participant ": WeatherReportRepository"              as ReportRepository     <<adapter>> <<domain>>
participant ": WeatherReport"                        as Report                  <<domain>>
participant ": WeatherData"                          as Data                  <<domain>>
participant ": WindData"                             as WindData                  <<domain>>
participant ": TemperatureData"                      as TemperatureData                  <<domain>>
participant ": WeatherEventRepository"               as EventRepository      <<adapter>> <<domain>>
participant ": WeatherEvent"                         as Event      <<domain>>
participant ": WeatherEventApplicationService"       as EventApplicationService      <<application>>
participant ": WeatherEventRESTController"              as WeatherEventRESTController      <<adapter>>
end box

box Users - Bounded Context #FF
participant ": UserRESTController"            as UserRESTController        <<adapter>>
end box

Actor -> ReportRESTController ++                        : uploadWeatherReport(\n    details,\n    picture,\n    userId)
ReportRESTController -> ReportApplicationService ++     : uploadWeatherReport(d, p, uId)
deactivate ReportRESTController

ReportApplicationService -> ReportRepository ++         : provideIdentity()
deactivate ReportRepository

ReportApplicationService --> Report **                  : report = create(rId, d, p, uId)
activate Report
Report -> UserRESTController ++                         : validateUserMaySubmitReport(uId)
return boolean

Report --> Data **                                      : data = parseDetails(d)
activate Data
Data -> Data ++                                         : wind, temp = extractData(d)
Data --> WindData **                                    : parseWindData(wind)
Data --> TemperatureData **                             : parseTemperatureData(temp)
deactivate Data
deactivate Data

Report -> EventRepository ++                            : event = matchToWeatherEvent(loc, dateTime)
EventRepository --> Event **                            : create()
deactivate EventRepository

Report -> Event ++                                      : updateLatestReport(data)
Event -> Event  ++                                      : calculateCurrentWeather()
deactivate Event
deactivate Event
Report -> EventApplicationService ++                    : provideUpdate(uId, event)
deactivate Report
EventApplicationService -> WeatherEventRESTController ++          : provideUpdate(uId, event)
deactivate WeatherEventRESTController
deactivate EventApplicationService

ReportApplicationService -> Report ++                   : event = getEvent()
deactivate Report
ReportApplicationService -> ReportRepository ++         : store(report)
deactivate ReportRepository
ReportApplicationService -> EventRepository ++          : store(event)
deactivate EventRepository
deactivate ReportApplicationService
@enduml